package nl.basvanmarwijk.mylocations.db.dao;

import java.util.List;
import nl.basvanmarwijk.mylocations.db.dao.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table LOCATION.
 */
public class Location {

    private long id;
    private String flag_path;
    private String country;
    private String place;
    private Double longitude;
    private Double latitude;
    private Double altitude;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient LocationDao myDao;

    private List<Location_time> fk_location_time;
    private List<Location_picture> fk_location_picture;

    public Location() {
    }

    public Location(long id) {
        this.id = id;
    }

    public Location(long id, String flag_path, String country, String place, Double longitude, Double latitude, Double altitude) {
        this.id = id;
        this.flag_path = flag_path;
        this.country = country;
        this.place = place;
        this.longitude = longitude;
        this.latitude = latitude;
        this.altitude = altitude;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getLocationDao() : null;
    }

    public long getId() {
        return id;
    }

    public void setId(long id) {
        this.id = id;
    }

    public String getFlag_path() {
        return flag_path;
    }

    public void setFlag_path(String flag_path) {
        this.flag_path = flag_path;
    }

    public String getCountry() {
        return country;
    }

    public void setCountry(String country) {
        this.country = country;
    }

    public String getPlace() {
        return place;
    }

    public void setPlace(String place) {
        this.place = place;
    }

    public Double getLongitude() {
        return longitude;
    }

    public void setLongitude(Double longitude) {
        this.longitude = longitude;
    }

    public Double getLatitude() {
        return latitude;
    }

    public void setLatitude(Double latitude) {
        this.latitude = latitude;
    }

    public Double getAltitude() {
        return altitude;
    }

    public void setAltitude(Double altitude) {
        this.altitude = altitude;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Location_time> getFk_location_time() {
        if (fk_location_time == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Location_timeDao targetDao = daoSession.getLocation_timeDao();
            List<Location_time> fk_location_timeNew = targetDao._queryLocation_Fk_location_time(id);
            synchronized (this) {
                if(fk_location_time == null) {
                    fk_location_time = fk_location_timeNew;
                }
            }
        }
        return fk_location_time;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFk_location_time() {
        fk_location_time = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Location_picture> getFk_location_picture() {
        if (fk_location_picture == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            Location_pictureDao targetDao = daoSession.getLocation_pictureDao();
            List<Location_picture> fk_location_pictureNew = targetDao._queryLocation_Fk_location_picture(id);
            synchronized (this) {
                if(fk_location_picture == null) {
                    fk_location_picture = fk_location_pictureNew;
                }
            }
        }
        return fk_location_picture;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetFk_location_picture() {
        fk_location_picture = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
