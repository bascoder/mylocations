package nl.basvanmarwijk.mylocations.db.dao;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import nl.basvanmarwijk.mylocations.db.dao.Location_time;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table LOCATION_TIME.
*/
public class Location_timeDao extends AbstractDao<Location_time, Long> {

    public static final String TABLENAME = "LOCATION_TIME";

    /**
     * Properties of entity Location_time.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Datetimestamp = new Property(0, long.class, "datetimestamp", true, "DATETIMESTAMP");
        public final static Property Location_id = new Property(1, long.class, "location_id", false, "LOCATION_ID");
    };

    private Query<Location_time> location_Fk_location_timeQuery;

    public Location_timeDao(DaoConfig config) {
        super(config);
    }
    
    public Location_timeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'LOCATION_TIME' (" + //
                "'DATETIMESTAMP' INTEGER PRIMARY KEY NOT NULL ," + // 0: datetimestamp
                "'LOCATION_ID' INTEGER NOT NULL );"); // 1: location_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'LOCATION_TIME'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Location_time entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getDatetimestamp());
        stmt.bindLong(2, entity.getLocation_id());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Location_time readEntity(Cursor cursor, int offset) {
        Location_time entity = new Location_time( //
            cursor.getLong(offset + 0), // datetimestamp
            cursor.getLong(offset + 1) // location_id
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Location_time entity, int offset) {
        entity.setDatetimestamp(cursor.getLong(offset + 0));
        entity.setLocation_id(cursor.getLong(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Location_time entity, long rowId) {
        entity.setDatetimestamp(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Location_time entity) {
        if(entity != null) {
            return entity.getDatetimestamp();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "fk_location_time" to-many relationship of Location. */
    public List<Location_time> _queryLocation_Fk_location_time(long location_id) {
        synchronized (this) {
            if (location_Fk_location_timeQuery == null) {
                QueryBuilder<Location_time> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Location_id.eq(null));
                location_Fk_location_timeQuery = queryBuilder.build();
            }
        }
        Query<Location_time> query = location_Fk_location_timeQuery.forCurrentThread();
        query.setParameter(0, location_id);
        return query.list();
    }

}
