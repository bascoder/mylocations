package nl.basvanmarwijk.mylocations.db.dao;

import android.database.sqlite.SQLiteDatabase;

import java.util.Map;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.AbstractDaoSession;
import de.greenrobot.dao.identityscope.IdentityScopeType;
import de.greenrobot.dao.internal.DaoConfig;

import nl.basvanmarwijk.mylocations.db.dao.Location;
import nl.basvanmarwijk.mylocations.db.dao.Location_time;
import nl.basvanmarwijk.mylocations.db.dao.Location_picture;

import nl.basvanmarwijk.mylocations.db.dao.LocationDao;
import nl.basvanmarwijk.mylocations.db.dao.Location_timeDao;
import nl.basvanmarwijk.mylocations.db.dao.Location_pictureDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.

/**
 * {@inheritDoc}
 * 
 * @see de.greenrobot.dao.AbstractDaoSession
 */
public class DaoSession extends AbstractDaoSession {

    private final DaoConfig locationDaoConfig;
    private final DaoConfig location_timeDaoConfig;
    private final DaoConfig location_pictureDaoConfig;

    private final LocationDao locationDao;
    private final Location_timeDao location_timeDao;
    private final Location_pictureDao location_pictureDao;

    public DaoSession(SQLiteDatabase db, IdentityScopeType type, Map<Class<? extends AbstractDao<?, ?>>, DaoConfig>
            daoConfigMap) {
        super(db);

        locationDaoConfig = daoConfigMap.get(LocationDao.class).clone();
        locationDaoConfig.initIdentityScope(type);

        location_timeDaoConfig = daoConfigMap.get(Location_timeDao.class).clone();
        location_timeDaoConfig.initIdentityScope(type);

        location_pictureDaoConfig = daoConfigMap.get(Location_pictureDao.class).clone();
        location_pictureDaoConfig.initIdentityScope(type);

        locationDao = new LocationDao(locationDaoConfig, this);
        location_timeDao = new Location_timeDao(location_timeDaoConfig, this);
        location_pictureDao = new Location_pictureDao(location_pictureDaoConfig, this);

        registerDao(Location.class, locationDao);
        registerDao(Location_time.class, location_timeDao);
        registerDao(Location_picture.class, location_pictureDao);
    }
    
    public void clear() {
        locationDaoConfig.getIdentityScope().clear();
        location_timeDaoConfig.getIdentityScope().clear();
        location_pictureDaoConfig.getIdentityScope().clear();
    }

    public LocationDao getLocationDao() {
        return locationDao;
    }

    public Location_timeDao getLocation_timeDao() {
        return location_timeDao;
    }

    public Location_pictureDao getLocation_pictureDao() {
        return location_pictureDao;
    }

}
